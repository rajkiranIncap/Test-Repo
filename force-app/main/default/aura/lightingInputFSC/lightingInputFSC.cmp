<aura:component  access="global" extensible="true" abstract="true">
  <aura:registerEvent name="calculateValues" type="c:eventToCalculateValues" description="On change component event will handle values calculation."/>
  <aura:handler event="c:eventToValidateComponents" action="{!c.handleValidation}" description="Application event fired to validate component"/>    	
  <aura:handler name="init" value="{!this}" action="{!c.init}" />

  <!--All types-->
  <aura:attribute name="type" type="String" required="true" default="text" description="The type of the input. This value defaults to text."/>
  <aura:attribute name="label" type="String"  default="" description="Text label for the input."/>
  <aura:attribute name="value" type="String" default="" description="Specifies the value of an input element."/>
  <aura:attribute name="class" type="String" description="A CSS class for the outer element, in addition to the component's base classes."/>
  <aura:attribute name="name" type="String" description="Specifies the name of an input element."/>
  <aura:attribute name="readonly" type="String" description="Specifies that an input field is read-only. This value defaults to false."/>
  <aura:attribute name="required" type="String" description="Specifies that an input field must be filled out before submitting the form. This value defaults to false."/>

  <!--Type Specific-->
  <aura:attribute name="accesskey" type="String" description="Specifies a shortcut key to activate or focus an element."/>
  <aura:attribute name="checked" type="Boolean" description="Specifies whether the checkbox is checked. This value defaults to false."/>
  <aura:attribute name="disabled" type="String" description="Specifies that an input element should be disabled. This value defaults to false."/>
  <aura:attribute name="formatter" type="String" description="String value with the formatter to be used for number input. Valid values include decimal, percent, percent-fixed, and currency."/>
  <aura:attribute name="isLoading" type="String" description="Specifies whether the spinner is displayed to indicate that data is loading. This value defaults to false."/>
  <aura:attribute name="max" type="String" description="The maximum acceptable value for the input. This attribute can be used only with number, range, date, time, and datetime input types. 
                                                        For number and range type, the max value is a decimal number. For the date, time, and datetime types, 
                                                        the max value must use a valid string for the type."/>
  <aura:attribute name="maxlength" type="String" description="The maximum number of characters allowed in the field."/>
  <aura:attribute name="min" type="String" description="The minimum acceptable value for the input. This attribute can be used only with number, range, date, time, and datetime input types. 
                                                        For number and range types, the min value is a decimal number. For the date, time, and datetime types, 
                                                        the min value must use a valid string for the type."/>
  <aura:attribute name="minlength" type="String" description="The minimum number of characters allowed in the field."/>
  <aura:attribute name="multiple" type="String" description="Specifies that a user can enter more than one value. This attribute can be used only when type='file' or type='email'."/>
  <aura:attribute name="pattern" type="String" description="Specifies the regular expression that the input's value is checked against. This attribute is supported for text, search, url, tel, email, and password types."/>
  <aura:attribute name="placeholder" type="String" description="Text that is displayed when the field is empty, to prompt the user for a valid entry."/>
  <aura:attribute name="step" type="String" description="Granularity of the value, specified as a positive floating point number. Use 'any' when granularity is not a concern. This value defaults to 1."/>
  <aura:attribute name="tabindex" type="String" description="Specifies the tab order of an element (when the tab button is used for navigating)."/>
  <aura:attribute name="title" type="String" description="Displays tooltip text when the mouse moves over the element."/>
  <aura:attribute name="variant" type="String" description="The variant changes the appearance of an input field. 
                                                            Accepted variants include standard and label-hidden. 
                                                            This value defaults to standard."/>

  <!--Validation-->
  <aura:attribute name="messageToggleActive" type="String" description="Text shown for the active state of a toggle. The default is Active"/>
  <aura:attribute name="messageToggleInactive" type="String" description="Text shown for then inactive state of a toggle. The default is Inactive."/>
  <aura:attribute name="messageWhenBadInput" type="String" description="Error message to be displayed when a bad input is detected."/>
  <aura:attribute name="messageWhenPatternMismatch" type="String" description="Error message to be displayed when a pattern mismatch is detected."/>
  <aura:attribute name="messageWhenRangeOverflow" type="String" description="Error message to be displayed when a range overflow is detected."/>
  <aura:attribute name="messageWhenRangeUnderflow" type="String" description="Error message to be displayed when a range underflow is detected."/>
  <aura:attribute name="messageWhenStepMismatch" type="String" description="Error message to be displayed when a step mismatch is detected."/>
  <aura:attribute name="messageWhenTooLong" type="String" description="Error message to be displayed when the value is too long."/>
  <aura:attribute name="messageWhenTypeMismatch" type="String" description="Error message to be displayed when a type mismatch is detected."/>
  <aura:attribute name="messageWhenValueMissing" type="String" description="Error message to be displayed when the value is missing."/>
  <aura:attribute name="columns" type="String" default="1"/>
  <aura:attribute name="columnsInt" type="Integer" />


<aura:if isTrue="{!v.isRender}"> <!-- 07/02/2019 Incapsulate Added condition for depedent skip logic-->
  <!--<div class="slds-grid slds-wrap "></div>-->
  <div class="{!'padding-px slds-scope slds-medium-size_1-of-'+ v.columns}">
    <lightning:input 
                         accesskey="{!v.accesskey}"
                         body="{!v.body}"
                         checked="{!v.checked}"
                         class="{!v.class}"
                     	 label="{!v.label}"
                         disabled="{!v.disabled}"
                         formatter="{!v.formatter}"
                         isLoading="{!v.isLoading}"
                         max="{!v.max}"
                         maxlength="{!v.maxlength}"
                         messageToggleActive="{!v.messageToggleActive}"
                         messageToggleInactive="{!v.messageToggleInactive}"
                         messageWhenBadInput="{!v.messageWhenBadInput}"
                         messageWhenPatternMismatch="{!v.messageWhenPatternMismatch}"
                         messageWhenRangeOverflow="{!v.messageWhenRangeOverflow}"
                         messageWhenRangeUnderflow="{!v.messageWhenRangeUnderflow}"
                         messageWhenStepMismatch="{!v.messageWhenStepMismatch}"
                         messageWhenTooLong="{!v.messageWhenTooLong}"
                         messageWhenTypeMismatch="{!v.messageWhenTypeMismatch}"
                         messageWhenValueMissing="{!v.messageWhenValueMissing}"
                         min="{!v.min}"
                         minlength="{!v.minlength}"
                         multiple="{!v.multiple}"
                         name="{!v.name}"
                         pattern="{!v.pattern}"
                         placeholder="{!v.placeholder}"
                         readonly="{!v.readonly}"
                         required="{!v.required}"
                         step="{!v.step}"
                         tabindex="{!v.tabindex}"
                         title="{!v.title}"
                         type="{!v.type}"
                         value="{!v.value}"
                         variant="{!v.variant}"
                     	 onchange="{!c.onInputChange}"                     
                     	 aura:id="incapLightningInputEl"
                         />

      <aura:if isTrue="{!v.type == 'range'}">
        <div class="range-value-container">
          <div class="slds-slider-label__range">{!v.min}</div>
          <div class="slds-slider__value">{!v.value}</div>
          <div class="slds-slider-label__range">{!v.max}</div>
        </div>
      </aura:if>
      </div>{!v.body}
       <!--<div class="slds-col icon-comment" >
           
      </div>-->
    
    </aura:if>
     
</aura:component>